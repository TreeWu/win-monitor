// tslint:disable
/**
 * win-monitor
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, {AxiosInstance, AxiosPromise} from 'axios';
import {Configuration} from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from '../base';
// @ts-ignore
// @ts-ignore
// @ts-ignore
// @ts-ignore
// @ts-ignore
import {MainHost, MainHostModel, MainHostScreenshot, MainMonitor, MainResponse} from '../models';

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 监控数据上传
         * @summary 监控数据上传
         * @param {MainMonitor} [mainMonitor]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMonitorPost: async (mainMonitor?: MainMonitor, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/monitor`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof mainMonitor !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(mainMonitor !== undefined ? mainMonitor : {}) : (mainMonitor || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 监控数据上传
         * @summary 监控数据上传
         * @param {MainMonitor} [mainMonitor]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMonitorPost_1: async (mainMonitor?: MainMonitor, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/monitor`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof mainMonitor !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(mainMonitor !== undefined ? mainMonitor : {}) : (mainMonitor || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 设备注册
         * @summary 设备注册
         * @param {MainHost} [mainHost]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRegisterPost: async (mainHost?: MainHost, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/register`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof mainHost !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(mainHost !== undefined ? mainHost : {}) : (mainHost || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 设备注册
         * @summary 设备注册
         * @param {MainHost} [mainHost]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRegisterPost_2: async (mainHost?: MainHost, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/register`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof mainHost !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(mainHost !== undefined ? mainHost : {}) : (mainHost || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 设备注册
         * @summary 截图上传
         * @param {MainHostScreenshot} [mainHostScreenshot]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScreenshotPost: async (mainHostScreenshot?: MainHostScreenshot, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/screenshot`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof mainHostScreenshot !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(mainHostScreenshot !== undefined ? mainHostScreenshot : {}) : (mainHostScreenshot || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 设备注册
         * @summary 截图上传
         * @param {MainHostScreenshot} [mainHostScreenshot]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScreenshotPost_3: async (mainHostScreenshot?: MainHostScreenshot, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/screenshot`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof mainHostScreenshot !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(mainHostScreenshot !== undefined ? mainHostScreenshot : {}) : (mainHostScreenshot || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 主机列表
         * @summary 主机列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consoleHostGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/console/host`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 主机列表
         * @summary 主机列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consoleHostGet_4: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/console/host`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 监控数据
         * @summary 监控数据
         * @param {string} hostId 参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consoleHostHostIdGet: async (hostId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'hostId' is not null or undefined
            if (hostId === null || hostId === undefined) {
                throw new RequiredError('hostId', 'Required parameter hostId was null or undefined when calling consoleHostHostIdGet.');
            }
            const localVarPath = `/console/host/{hostId}`
                .replace(`{${"hostId"}}`, encodeURIComponent(String(hostId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 监控数据
         * @summary 监控数据
         * @param {string} hostId 参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consoleHostHostIdGet_5: async (hostId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'hostId' is not null or undefined
            if (hostId === null || hostId === undefined) {
                throw new RequiredError('hostId', 'Required parameter hostId was null or undefined when calling consoleHostHostIdGet_5.');
            }
            const localVarPath = `/console/host/{hostId}`
                .replace(`{${"hostId"}}`, encodeURIComponent(String(hostId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 程序主机配置
         * @summary 程序主机配置
         * @param {string} hostId
         * @param {MainHostModel} [mainHostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consoleHostHostIdPost: async (hostId: string, mainHostModel?: MainHostModel, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'hostId' is not null or undefined
            if (hostId === null || hostId === undefined) {
                throw new RequiredError('hostId', 'Required parameter hostId was null or undefined when calling consoleHostHostIdPost.');
            }
            const localVarPath = `/console/host/{hostId}`
                .replace(`{${"hostId"}}`, encodeURIComponent(String(hostId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof mainHostModel !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(mainHostModel !== undefined ? mainHostModel : {}) : (mainHostModel || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 程序主机配置
         * @summary 程序主机配置
         * @param {string} hostId
         * @param {MainHostModel} [mainHostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consoleHostHostIdPost_6: async (hostId: string, mainHostModel?: MainHostModel, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'hostId' is not null or undefined
            if (hostId === null || hostId === undefined) {
                throw new RequiredError('hostId', 'Required parameter hostId was null or undefined when calling consoleHostHostIdPost_6.');
            }
            const localVarPath = `/console/host/{hostId}`
                .replace(`{${"hostId"}}`, encodeURIComponent(String(hostId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof mainHostModel !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(mainHostModel !== undefined ? mainHostModel : {}) : (mainHostModel || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 监控数据上传
         * @summary 监控数据上传
         * @param {MainMonitor} [mainMonitor]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMonitorPost(mainMonitor?: MainMonitor, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MainResponse & object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiMonitorPost(mainMonitor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 监控数据上传
         * @summary 监控数据上传
         * @param {MainMonitor} [mainMonitor]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMonitorPost_1(mainMonitor?: MainMonitor, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MainResponse & object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiMonitorPost_1(mainMonitor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 设备注册
         * @summary 设备注册
         * @param {MainHost} [mainHost]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRegisterPost(mainHost?: MainHost, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MainResponse & object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiRegisterPost(mainHost, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 设备注册
         * @summary 设备注册
         * @param {MainHost} [mainHost]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRegisterPost_2(mainHost?: MainHost, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MainResponse & object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiRegisterPost_2(mainHost, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 设备注册
         * @summary 截图上传
         * @param {MainHostScreenshot} [mainHostScreenshot]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiScreenshotPost(mainHostScreenshot?: MainHostScreenshot, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MainResponse & object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiScreenshotPost(mainHostScreenshot, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 设备注册
         * @summary 截图上传
         * @param {MainHostScreenshot} [mainHostScreenshot]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiScreenshotPost_3(mainHostScreenshot?: MainHostScreenshot, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MainResponse & object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiScreenshotPost_3(mainHostScreenshot, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 主机列表
         * @summary 主机列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async consoleHostGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MainResponse & object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).consoleHostGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 主机列表
         * @summary 主机列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async consoleHostGet_4(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MainResponse & object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).consoleHostGet_4(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 监控数据
         * @summary 监控数据
         * @param {string} hostId 参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async consoleHostHostIdGet(hostId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MainResponse & object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).consoleHostHostIdGet(hostId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 监控数据
         * @summary 监控数据
         * @param {string} hostId 参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async consoleHostHostIdGet_5(hostId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MainResponse & object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).consoleHostHostIdGet_5(hostId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 程序主机配置
         * @summary 程序主机配置
         * @param {string} hostId
         * @param {MainHostModel} [mainHostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async consoleHostHostIdPost(hostId: string, mainHostModel?: MainHostModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MainResponse & object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).consoleHostHostIdPost(hostId, mainHostModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 程序主机配置
         * @summary 程序主机配置
         * @param {string} hostId
         * @param {MainHostModel} [mainHostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async consoleHostHostIdPost_6(hostId: string, mainHostModel?: MainHostModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MainResponse & object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).consoleHostHostIdPost_6(hostId, mainHostModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 监控数据上传
         * @summary 监控数据上传
         * @param {MainMonitor} [mainMonitor]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMonitorPost(mainMonitor?: MainMonitor, options?: any): AxiosPromise<MainResponse & object> {
            return DefaultApiFp(configuration).apiMonitorPost(mainMonitor, options).then((request) => request(axios, basePath));
        },
        /**
         * 监控数据上传
         * @summary 监控数据上传
         * @param {MainMonitor} [mainMonitor]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMonitorPost_1(mainMonitor?: MainMonitor, options?: any): AxiosPromise<MainResponse & object> {
            return DefaultApiFp(configuration).apiMonitorPost_1(mainMonitor, options).then((request) => request(axios, basePath));
        },
        /**
         * 设备注册
         * @summary 设备注册
         * @param {MainHost} [mainHost]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRegisterPost(mainHost?: MainHost, options?: any): AxiosPromise<MainResponse & object> {
            return DefaultApiFp(configuration).apiRegisterPost(mainHost, options).then((request) => request(axios, basePath));
        },
        /**
         * 设备注册
         * @summary 设备注册
         * @param {MainHost} [mainHost]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRegisterPost_2(mainHost?: MainHost, options?: any): AxiosPromise<MainResponse & object> {
            return DefaultApiFp(configuration).apiRegisterPost_2(mainHost, options).then((request) => request(axios, basePath));
        },
        /**
         * 设备注册
         * @summary 截图上传
         * @param {MainHostScreenshot} [mainHostScreenshot]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScreenshotPost(mainHostScreenshot?: MainHostScreenshot, options?: any): AxiosPromise<MainResponse & object> {
            return DefaultApiFp(configuration).apiScreenshotPost(mainHostScreenshot, options).then((request) => request(axios, basePath));
        },
        /**
         * 设备注册
         * @summary 截图上传
         * @param {MainHostScreenshot} [mainHostScreenshot]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScreenshotPost_3(mainHostScreenshot?: MainHostScreenshot, options?: any): AxiosPromise<MainResponse & object> {
            return DefaultApiFp(configuration).apiScreenshotPost_3(mainHostScreenshot, options).then((request) => request(axios, basePath));
        },
        /**
         * 主机列表
         * @summary 主机列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consoleHostGet(options?: any): AxiosPromise<MainResponse & object> {
            return DefaultApiFp(configuration).consoleHostGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 主机列表
         * @summary 主机列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consoleHostGet_4(options?: any): AxiosPromise<MainResponse & object> {
            return DefaultApiFp(configuration).consoleHostGet_4(options).then((request) => request(axios, basePath));
        },
        /**
         * 监控数据
         * @summary 监控数据
         * @param {string} hostId 参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consoleHostHostIdGet(hostId: string, options?: any): AxiosPromise<MainResponse & object> {
            return DefaultApiFp(configuration).consoleHostHostIdGet(hostId, options).then((request) => request(axios, basePath));
        },
        /**
         * 监控数据
         * @summary 监控数据
         * @param {string} hostId 参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consoleHostHostIdGet_5(hostId: string, options?: any): AxiosPromise<MainResponse & object> {
            return DefaultApiFp(configuration).consoleHostHostIdGet_5(hostId, options).then((request) => request(axios, basePath));
        },
        /**
         * 程序主机配置
         * @summary 程序主机配置
         * @param {string} hostId
         * @param {MainHostModel} [mainHostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consoleHostHostIdPost(hostId: string, mainHostModel?: MainHostModel, options?: any): AxiosPromise<MainResponse & object> {
            return DefaultApiFp(configuration).consoleHostHostIdPost(hostId, mainHostModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 程序主机配置
         * @summary 程序主机配置
         * @param {string} hostId
         * @param {MainHostModel} [mainHostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consoleHostHostIdPost_6(hostId: string, mainHostModel?: MainHostModel, options?: any): AxiosPromise<MainResponse & object> {
            return DefaultApiFp(configuration).consoleHostHostIdPost_6(hostId, mainHostModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 监控数据上传
     * @summary 监控数据上传
     * @param {MainMonitor} [mainMonitor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiMonitorPost(mainMonitor?: MainMonitor, options?: any) {
        return DefaultApiFp(this.configuration).apiMonitorPost(mainMonitor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 监控数据上传
     * @summary 监控数据上传
     * @param {MainMonitor} [mainMonitor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiMonitorPost_1(mainMonitor?: MainMonitor, options?: any) {
        return DefaultApiFp(this.configuration).apiMonitorPost_1(mainMonitor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 设备注册
     * @summary 设备注册
     * @param {MainHost} [mainHost]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiRegisterPost(mainHost?: MainHost, options?: any) {
        return DefaultApiFp(this.configuration).apiRegisterPost(mainHost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 设备注册
     * @summary 设备注册
     * @param {MainHost} [mainHost]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiRegisterPost_2(mainHost?: MainHost, options?: any) {
        return DefaultApiFp(this.configuration).apiRegisterPost_2(mainHost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 设备注册
     * @summary 截图上传
     * @param {MainHostScreenshot} [mainHostScreenshot]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiScreenshotPost(mainHostScreenshot?: MainHostScreenshot, options?: any) {
        return DefaultApiFp(this.configuration).apiScreenshotPost(mainHostScreenshot, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 设备注册
     * @summary 截图上传
     * @param {MainHostScreenshot} [mainHostScreenshot]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiScreenshotPost_3(mainHostScreenshot?: MainHostScreenshot, options?: any) {
        return DefaultApiFp(this.configuration).apiScreenshotPost_3(mainHostScreenshot, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 主机列表
     * @summary 主机列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public consoleHostGet(options?: any) {
        return DefaultApiFp(this.configuration).consoleHostGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 主机列表
     * @summary 主机列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public consoleHostGet_4(options?: any) {
        return DefaultApiFp(this.configuration).consoleHostGet_4(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 监控数据
     * @summary 监控数据
     * @param {string} hostId 参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public consoleHostHostIdGet(hostId: string, options?: any) {
        return DefaultApiFp(this.configuration).consoleHostHostIdGet(hostId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 监控数据
     * @summary 监控数据
     * @param {string} hostId 参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public consoleHostHostIdGet_5(hostId: string, options?: any) {
        return DefaultApiFp(this.configuration).consoleHostHostIdGet_5(hostId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 程序主机配置
     * @summary 程序主机配置
     * @param {string} hostId
     * @param {MainHostModel} [mainHostModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public consoleHostHostIdPost(hostId: string, mainHostModel?: MainHostModel, options?: any) {
        return DefaultApiFp(this.configuration).consoleHostHostIdPost(hostId, mainHostModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 程序主机配置
     * @summary 程序主机配置
     * @param {string} hostId
     * @param {MainHostModel} [mainHostModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public consoleHostHostIdPost_6(hostId: string, mainHostModel?: MainHostModel, options?: any) {
        return DefaultApiFp(this.configuration).consoleHostHostIdPost_6(hostId, mainHostModel, options).then((request) => request(this.axios, this.basePath));
    }

}

// tslint:disable
/**
 * 个人项目
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, {AxiosInstance, AxiosPromise} from 'axios';
import {Configuration} from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from '../base';
// @ts-ignore
// @ts-ignore
// @ts-ignore
import {MainHelloReq, MainResponse} from '../models';

/**
 * SwaggerApi - axios parameter creator
 * @export
 */
export const SwaggerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sayhello接口，打招呼
         * @summary Sayhello接口
         * @param {MainHelloReq} [mainHelloReq]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zxSayHello: async (mainHelloReq?: MainHelloReq, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sayHello`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof mainHelloReq !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(mainHelloReq !== undefined ? mainHelloReq : {}) : (mainHelloReq || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sayhello接口，打招呼
         * @summary Sayhello接口
         * @param {MainHelloReq} [mainHelloReq]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zxSayHello_1: async (mainHelloReq?: MainHelloReq, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sayHello`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof mainHelloReq !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(mainHelloReq !== undefined ? mainHelloReq : {}) : (mainHelloReq || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SwaggerApi - functional programming interface
 * @export
 */
export const SwaggerApiFp = function (configuration?: Configuration) {
    return {
        /**
         * Sayhello接口，打招呼
         * @summary Sayhello接口
         * @param {MainHelloReq} [mainHelloReq]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zxSayHello(mainHelloReq?: MainHelloReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MainResponse & object>> {
            const localVarAxiosArgs = await SwaggerApiAxiosParamCreator(configuration).zxSayHello(mainHelloReq, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sayhello接口，打招呼
         * @summary Sayhello接口
         * @param {MainHelloReq} [mainHelloReq]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zxSayHello_1(mainHelloReq?: MainHelloReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MainResponse & object>> {
            const localVarAxiosArgs = await SwaggerApiAxiosParamCreator(configuration).zxSayHello_1(mainHelloReq, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SwaggerApi - factory interface
 * @export
 */
export const SwaggerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sayhello接口，打招呼
         * @summary Sayhello接口
         * @param {MainHelloReq} [mainHelloReq]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zxSayHello(mainHelloReq?: MainHelloReq, options?: any): AxiosPromise<MainResponse & object> {
            return SwaggerApiFp(configuration).zxSayHello(mainHelloReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Sayhello接口，打招呼
         * @summary Sayhello接口
         * @param {MainHelloReq} [mainHelloReq]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zxSayHello_1(mainHelloReq?: MainHelloReq, options?: any): AxiosPromise<MainResponse & object> {
            return SwaggerApiFp(configuration).zxSayHello_1(mainHelloReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SwaggerApi - object-oriented interface
 * @export
 * @class SwaggerApi
 * @extends {BaseAPI}
 */
export class SwaggerApi extends BaseAPI {
    /**
     * Sayhello接口，打招呼
     * @summary Sayhello接口
     * @param {MainHelloReq} [mainHelloReq]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwaggerApi
     */
    public zxSayHello(mainHelloReq?: MainHelloReq, options?: any) {
        return SwaggerApiFp(this.configuration).zxSayHello(mainHelloReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sayhello接口，打招呼
     * @summary Sayhello接口
     * @param {MainHelloReq} [mainHelloReq]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwaggerApi
     */
    public zxSayHello_1(mainHelloReq?: MainHelloReq, options?: any) {
        return SwaggerApiFp(this.configuration).zxSayHello_1(mainHelloReq, options).then((request) => request(this.axios, this.basePath));
    }

}

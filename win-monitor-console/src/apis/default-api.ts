/* eslint-disable */
// @ts-nocheck
/**
 * win-monitor
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, {AxiosInstance, AxiosPromise} from 'axios';
import {Configuration} from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from '../base.ts';
// @ts-ignore
import {MainHostModel} from '../models';

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 程序主机配置
         * @summary 程序主机配置
         * @param {MainHostModel} [mainHostModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsoleHostConfPost: async (mainHostModel?: MainHostModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/console/host/conf`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof mainHostModel !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(mainHostModel !== undefined ? mainHostModel : {}) : (mainHostModel || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 程序主机配置
         * @summary 程序主机配置
         * @param {MainHostModel} [mainHostModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsoleHostConfPost_1: async (mainHostModel?: MainHostModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/console/host/conf`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof mainHostModel !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(mainHostModel !== undefined ? mainHostModel : {}) : (mainHostModel || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 主机列表
         * @summary 主机列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsoleHostGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/console/host`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 主机列表
         * @summary 主机列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsoleHostGet_2: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/console/host`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 监控数据
         * @summary 监控数据
         * @param {string} hostId 参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsoleHostHostIdGet: async (hostId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'hostId' is not null or undefined
            if (hostId === null || hostId === undefined) {
                throw new RequiredError('hostId', 'Required parameter hostId was null or undefined when calling apiConsoleHostHostIdGet.');
            }
            const localVarPath = `/api/console/host/{hostId}`
                .replace(`{${"hostId"}}`, encodeURIComponent(String(hostId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 监控数据
         * @summary 监控数据
         * @param {string} hostId 参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsoleHostHostIdGet_3: async (hostId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'hostId' is not null or undefined
            if (hostId === null || hostId === undefined) {
                throw new RequiredError('hostId', 'Required parameter hostId was null or undefined when calling apiConsoleHostHostIdGet_3.');
            }
            const localVarPath = `/api/console/host/{hostId}`
                .replace(`{${"hostId"}}`, encodeURIComponent(String(hostId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 程序主机配置
         * @summary 程序主机配置
         * @param {MainHostModel} [mainHostModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsoleHostConfPost(mainHostModel?: MainHostModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiConsoleHostConfPost(mainHostModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 程序主机配置
         * @summary 程序主机配置
         * @param {MainHostModel} [mainHostModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsoleHostConfPost_1(mainHostModel?: MainHostModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiConsoleHostConfPost_1(mainHostModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 主机列表
         * @summary 主机列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsoleHostGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiConsoleHostGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 主机列表
         * @summary 主机列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsoleHostGet_2(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiConsoleHostGet_2(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 监控数据
         * @summary 监控数据
         * @param {string} hostId 参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsoleHostHostIdGet(hostId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiConsoleHostHostIdGet(hostId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 监控数据
         * @summary 监控数据
         * @param {string} hostId 参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsoleHostHostIdGet_3(hostId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiConsoleHostHostIdGet_3(hostId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 程序主机配置
         * @summary 程序主机配置
         * @param {MainHostModel} [mainHostModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsoleHostConfPost(mainHostModel?: MainHostModel, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).apiConsoleHostConfPost(mainHostModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 程序主机配置
         * @summary 程序主机配置
         * @param {MainHostModel} [mainHostModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsoleHostConfPost_1(mainHostModel?: MainHostModel, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).apiConsoleHostConfPost_1(mainHostModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 主机列表
         * @summary 主机列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsoleHostGet(options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).apiConsoleHostGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 主机列表
         * @summary 主机列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsoleHostGet_2(options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).apiConsoleHostGet_2(options).then((request) => request(axios, basePath));
        },
        /**
         * 监控数据
         * @summary 监控数据
         * @param {string} hostId 参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsoleHostHostIdGet(hostId: string, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).apiConsoleHostHostIdGet(hostId, options).then((request) => request(axios, basePath));
        },
        /**
         * 监控数据
         * @summary 监控数据
         * @param {string} hostId 参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsoleHostHostIdGet_3(hostId: string, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).apiConsoleHostHostIdGet_3(hostId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 程序主机配置
     * @summary 程序主机配置
     * @param {MainHostModel} [mainHostModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiConsoleHostConfPost(mainHostModel?: MainHostModel, options?: any) {
        return DefaultApiFp(this.configuration).apiConsoleHostConfPost(mainHostModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 程序主机配置
     * @summary 程序主机配置
     * @param {MainHostModel} [mainHostModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiConsoleHostConfPost_1(mainHostModel?: MainHostModel, options?: any) {
        return DefaultApiFp(this.configuration).apiConsoleHostConfPost_1(mainHostModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 主机列表
     * @summary 主机列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiConsoleHostGet(options?: any) {
        return DefaultApiFp(this.configuration).apiConsoleHostGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 主机列表
     * @summary 主机列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiConsoleHostGet_2(options?: any) {
        return DefaultApiFp(this.configuration).apiConsoleHostGet_2(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 监控数据
     * @summary 监控数据
     * @param {string} hostId 参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiConsoleHostHostIdGet(hostId: string, options?: any) {
        return DefaultApiFp(this.configuration).apiConsoleHostHostIdGet(hostId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 监控数据
     * @summary 监控数据
     * @param {string} hostId 参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiConsoleHostHostIdGet_3(hostId: string, options?: any) {
        return DefaultApiFp(this.configuration).apiConsoleHostHostIdGet_3(hostId, options).then((request) => request(this.axios, this.basePath));
    }

}
